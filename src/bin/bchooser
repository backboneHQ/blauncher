#!/usr/bin/env bpython3

import os
import sys
import json
from PySide2 import QtCore, QtWidgets, QtGui

class BChooserWindow(QtWidgets.QMainWindow):
    """
    Interface used to select the addons (--bchooser).
    """

    def __init__(self, appName, enabledAddons, disabledAddons):
        """
        Create a chooser window object.
        """
        super(BChooserWindow, self).__init__()
        self.__appName = appName
        self.__success = False
        self.__defaultEnabled = enabledAddons

        scrollArea = QtWidgets.QScrollArea()
        scrollArea.setFocusPolicy(QtCore.Qt.NoFocus)
        scrollArea.setWidgetResizable(True)
        layout = QtWidgets.QVBoxLayout()

        scrollLayout = QtWidgets.QVBoxLayout()
        scrollLayout.setMargin(0)
        scrollContainer = QtWidgets.QWidget()
        scrollContainer.setObjectName('scrollContainer')
        scrollContainer.setLayout(scrollLayout)
        scrollArea.setWidget(scrollContainer)

        presetLayout = QtWidgets.QHBoxLayout()
        actionsLayout = QtWidgets.QHBoxLayout()

        self.__presetDropdown = QtWidgets.QComboBox()
        self.__presetDropdown.activated.connect(self.__onPresetChanged)
        presetLayout.addWidget(self.__presetDropdown, 100)

        savePresetButton = QtWidgets.QPushButton('Save preset')
        savePresetButton.clicked.connect(self.__onSavePreset)
        savePresetButton.setIcon(self.style().standardIcon(QtWidgets.QStyle.SP_DialogSaveButton))
        presetLayout.addWidget(savePresetButton)

        removePresetButton = QtWidgets.QPushButton('Remove preset')
        removePresetButton.clicked.connect(self.__onRemovePreset)
        removePresetButton.setIcon(self.style().standardIcon(QtWidgets.QStyle.SP_DialogCancelButton))
        presetLayout.addWidget(removePresetButton)

        addonsListLayout = QtWidgets.QVBoxLayout()
        addonsListLayout.setMargin(0)
        addonsListGroupBox = QtWidgets.QGroupBox('')
        addonsListGroupBox.setLayout(addonsListLayout)

        defaultButton = QtWidgets.QPushButton('Default preset')
        defaultButton.setIcon(self.style().standardIcon(QtWidgets.QStyle.SP_DialogApplyButton))
        defaultButton.clicked.connect(self.__onDefault)
        presetLayout.addWidget(defaultButton)

        disableAllButton = QtWidgets.QPushButton('Disable All')
        disableAllButton.clicked.connect(self.__onDisableAll)
        actionsLayout.addWidget(disableAllButton)

        enableAllButton = QtWidgets.QPushButton('Enable All')
        enableAllButton.clicked.connect(self.__onEnableAll)
        actionsLayout.addWidget(enableAllButton)
        actionsLayout.addStretch()

        layout.addLayout(presetLayout)
        addonsListLayout.addLayout(actionsLayout)
        addonsListLayout.addWidget(scrollArea)
        layout.addWidget(addonsListGroupBox, 100)

        contentLayout = QtWidgets.QVBoxLayout()

        self.__addonsCheckBoxes = []
        for addon in sorted(enabledAddons) + sorted(disabledAddons):
            addonWidget = QtWidgets.QCheckBox(addon)
            addonWidget.setChecked(addon in enabledAddons)
            contentLayout.addWidget(addonWidget)
            self.__addonsCheckBoxes.append(addonWidget)

        scrollLayout.addLayout(contentLayout)
        scrollLayout.addStretch()

        actionAreaLayout = QtWidgets.QHBoxLayout()
        runButton = QtWidgets.QPushButton('Run {}'.format(appName))
        runButton.setStyleSheet('QPushButton {font-weight: bold}')
        runButton.setIcon(self.style().standardIcon(QtWidgets.QStyle.SP_ArrowForward))
        runButton.clicked.connect(self.__onRun)
        actionAreaLayout.addWidget(runButton, 100)

        layout.addLayout(actionAreaLayout)
        placeHolder = QtWidgets.QWidget()
        placeHolder.setLayout(layout)
        self.setCentralWidget(placeHolder)
        self.setWindowTitle("Addons available for {}".format(appName))
        self.resize(640, 420)

        self.__populatePresets()

    def success(self):
        """
        Return a boolean telling if the execution was successful.
        """
        return self.__success

    def __populatePresets(self):
        """
        Populate the list of presets.
        """
        self.__presetDropdown.clear()
        self.__presetDropdown.addItem('Presets')

        if not os.environ.get('BSYS_LOCAL_DATA', ''):
            return

        bchooserConfigPath = os.path.join(os.environ['BSYS_LOCAL_DATA'], 'bchooser.json')
        if not os.path.exists(bchooserConfigPath):
            return

        content = {}
        with open(bchooserConfigPath) as f:
            content = json.load(f)

        if not self.__appName in content:
            return

        self.__presetDropdown.addItems(sorted(content[self.__appName].keys()))

    def __onRun(self):
        """
        Callback executed when the run button is pressed.
        """
        self.__success = True
        self.close()

    def __onDisableAll(self):
        """
        Callback executed when disable all button is pressed.
        """
        for checkBox in self.__addonsCheckBoxes:
            checkBox.setChecked(False)

    def __onDefault(self):
        """
        Callback executed when default button is pressed.
        """
        for checkBox in self.__addonsCheckBoxes:
            checkBox.setChecked(checkBox.text() in self.__defaultEnabled)

    def __onPresetChanged(self, index):
        """
        Callback executed when previous selection button is pressed.
        """
        if index == 0:
            self.__onDefault()
            return

        if not os.environ.get('BSYS_LOCAL_DATA', ''):
            return

        bchooserConfigPath = os.path.join(os.environ['BSYS_LOCAL_DATA'], 'bchooser.json')
        if not os.path.exists(bchooserConfigPath):
            return

        content = {}
        with open(bchooserConfigPath) as f:
            content = json.load(f)

        if not self.__appName in content:
            return

        for checkBox in self.__addonsCheckBoxes:
            checkBox.setChecked(checkBox.text() in content[self.__appName][self.__presetDropdown.itemText(index)])

    def __onEnableAll(self):
        """
        Callback executed when enable all button is pressed.
        """
        for checkBox in self.__addonsCheckBoxes:
            checkBox.setChecked(True)

    def __onRemovePreset(self):
        """
        Callback executed when remove preset button is pressed.
        """
        if not self.__presetDropdown.currentIndex():
            QtWidgets.QMessageBox.critical(
                self,
                'Remove preset error',
                'Please select a valid preset!',
                QtWidgets.QMessageBox.Ok
            )
            return

        # storing selection
        if os.environ.get('BSYS_LOCAL_DATA', ''):
            bchooserConfigPath = os.path.join(os.environ['BSYS_LOCAL_DATA'], 'bchooser.json')
            if not os.path.exists(os.path.dirname(bchooserConfigPath)):
                os.makedirs(os.path.dirname(bchooserConfigPath), exist_ok=True)

            content = {}
            if os.path.exists(bchooserConfigPath):
                with open(bchooserConfigPath) as f:
                    content = json.load(f)

            currentPreset = self.__presetDropdown.currentText()
            if self.__appName in content and currentPreset in content[self.__appName]:
                del content[self.__appName][currentPreset]

            with open(bchooserConfigPath, 'w') as f:
                json.dump(content, f)

            self.__populatePresets()

    def __onSavePreset(self):
        """
        Callback executed when save preset button is pressed.
        """
        presetName, ok = QtWidgets.QInputDialog().getText(
            self,
            'Save Preset',
            'Preset name:',
            QtWidgets.QLineEdit.Normal,
            ''
        )

        if not (ok and presetName):
            return

        # storing selection
        if os.environ.get('BSYS_LOCAL_DATA', ''):
            bchooserConfigPath = os.path.join(os.environ['BSYS_LOCAL_DATA'], 'bchooser.json')
            if not os.path.exists(os.path.dirname(bchooserConfigPath)):
                os.makedirs(os.path.dirname(bchooserConfigPath), exist_ok=True)

            content = {}
            if os.path.exists(bchooserConfigPath):
                with open(bchooserConfigPath) as f:
                    content = json.load(f)

            if self.__appName not in content:
                content[self.__appName] = {}

            with open(bchooserConfigPath, 'w') as f:
                content[self.__appName][presetName] = self.__selectedAddons()
                json.dump(content, f)

            self.__populatePresets()
            self.__presetDropdown.setCurrentText(presetName)

    def __selectedAddons(self):
        """
        Return a list of selected addons.
        """
        return list(
            map(
                lambda y: y.text(),
                filter(
                    lambda x: x.isChecked(),
                    self.__addonsCheckBoxes
                )
            )
        )

    def closeEvent(self, event):
        """
        Print to the stdout selected (checked) addons and closes the window.
        """
        event.accept()
        sys.stdout.write(' '.join(self.__selectedAddons()))
        sys.stdout.flush()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)

    app.setStyle(QtWidgets.QStyleFactory.create('Fusion'))

    # dark palette
    palette = QtGui.QPalette()
    palette.setColor(QtGui.QPalette.Window, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.WindowText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Base, QtGui.QColor(25, 25, 25))
    palette.setColor(QtGui.QPalette.AlternateBase, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.ToolTipBase, QtCore.Qt.black)
    palette.setColor(QtGui.QPalette.ToolTipText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Text, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.Button, QtGui.QColor(53, 53, 53))
    palette.setColor(QtGui.QPalette.ButtonText, QtCore.Qt.white)
    palette.setColor(QtGui.QPalette.BrightText, QtCore.Qt.red)
    palette.setColor(QtGui.QPalette.Link, QtGui.QColor(42, 130, 218))
    palette.setColor(QtGui.QPalette.Highlight, QtGui.QColor(42, 130, 218))
    palette.setColor(QtGui.QPalette.HighlightedText, QtCore.Qt.black)
    app.setPalette(palette)

    app.setStyleSheet("QGroupBox, QWidget#scrollContainer {background-color: #232323}")

    enabledAddons = tuple(filter(lambda x: len(x), sys.argv[-1].strip().split(' ')))
    disabledAddons = tuple(filter(lambda x: len(x), sys.argv[-2].strip().split(' ')))
    appName = sys.argv[-3]

    window = BChooserWindow(appName, enabledAddons, disabledAddons)
    window.show()
    sys.exit(app.exec_() or int(not window.success()))
